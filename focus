#!/usr/bin/env perl -w

#
# This program is meant to help me focus, by blocking timewasting sites in /etc/hosts.
#
# If the program is invoked with 'focus on', a section will be added to the /etc/hosts file
# routing requests for the domains in __DATA__ to localhost.
#
# If the program is invoked with 'focus off', that section will be removed, but it will first
# wait for 60 seconds.  So there is no instant gratification if you just *have* to post to 
# Facebook or whatever. You can press any key to turn focus back on. After 60 minutes, focus 
# will automatically go back to on.
#
# The section in /etc/hosts should be apparently updated in place. It should begin with the line "# FOCUS" 
# and, optionally, end with the line "# ENDFOCUS"
#

use strict;

use File::Temp qw/tempfile/;
use POSIX qw/strftime/;
use Term::ReadKey;

my $INITIAL_DELAY = 60;
my $MAX_DISTRACTION_DURATION = 60 * 60;  # 1 hour
my $MAX_DAILY_DISTRACTION_DURATION = 2 * 60 * 60;  # 2 hours
my $MAX_DAILY_DISTRACTIONS = 4;

my $distractionRecordFile = "$ENV{'HOME'}/.focus";

my $hostFileName = "/etc/hosts";

sub usage {
  die "Usage: $0 [on|off|offquick|movie]\n";
}

# note, sometimes @$domains = []
sub printFocusSection {
  my ($outFh, $domainSpecs) = @_;
  print $outFh "# FOCUS\n";
  for my $domainSpec (@$domainSpecs) {
    for my $subDomain ('', 'www.') {
      my $domain = $subDomain . $domainSpec;
      # need to specify it twice; on MacOS X, will wait for the IPv6 lookup to time out
      for my $ip ('127.0.0.1', 'fe80::1%lo0') {
        print $outFh "$ip $domain\n";
      }
    }
  }
  print $outFh "# ENDFOCUS\n";
}

sub getDomainSpecs {
  my $excludeRegex = shift;
  my @domainSpecs;
  my $dataPos = tell DATA; # saved position
  while (<DATA>) {
    if ($excludeRegex) {
      next if /$excludeRegex/;
    }
    chomp;
    push @domainSpecs, $_;
  }
  seek DATA, $dataPos, 0; # seek to the beginning so we can read it again
  return \@domainSpecs;
}

sub rewriteHostsFile {
  my $excludeRegex = shift;

  my $domainSpecs = getDomainSpecs($excludeRegex);

  my ($outFh, $outFileName) = tempfile();

  open my $inFh, "<", $hostFileName or die $!;
  my $isReadingFocusSection = 0;
  my $isFocusSectionPrinted = 0;
  while (my $line = <$inFh>) {
    if ($line =~ /^# FOCUS/) {
      printFocusSection($outFh, $domainSpecs);
      $isFocusSectionPrinted = 1;
      $isReadingFocusSection = 1;
      next;
    } 
    if ($line =~ /^# ENDFOCUS/) {
      $isReadingFocusSection = 0;
      next;
    }
    if (!$isReadingFocusSection) {
      print $outFh $line;
    }
  }

  if (!$isFocusSectionPrinted) {
    printFocusSection($outFh, $domainSpecs);
  }

  chmod 0644, $outFileName or die $!;
  rename $outFileName, $hostFileName or die $!;

}

sub end() {
  ReadMode 0; # reset tty before exiting
  exit();
}

if (@ARGV < 1) {
  usage();
}

sub today {
  return strftime "%Y-%m-%d", localtime;
}

sub getTodayDistractions {
  my $today = today();
  my $count = 0;
  my $totalDuration = 0;
  if (-e $distractionRecordFile) {
    open my $fh, "<", $distractionRecordFile or die $!;
    while (<$fh>) {
      my ($date, $duration) = split;
      if ($date eq $today) {
        $count++;
        $totalDuration += $duration;
      }
    }
  }
  return ($count, $totalDuration);
}

sub recordDistraction {
  my ($duration) = @_;
  open my $fh, ">>", $distractionRecordFile or die $!;
  print {$fh} today() . "\t" . $duration . "\n";
}

if ($ARGV[0] eq "on") {
  rewriteHostsFile(undef);
  # do nothing. By default, will create entries for all domains, with no exclusions
} elsif ($ARGV[0] eq "off" or $ARGV[0] eq "movie" or $ARGV[0] eq "offquick") {
  my $duration = $MAX_DISTRACTION_DURATION;
  my $initialDelay = $INITIAL_DELAY;
  if ($ARGV[0] eq "movie") {
    $duration = 60 * 60 * 4;
  } elsif ($ARGV[0] eq "offquick") {
    $initialDelay = 0;
    $duration = 120;
  }

  #
  # stop from doing it too much
  #
  my ($todayDistractions, $todayDistractionDuration) = getTodayDistractions();
  if ($duration + $todayDistractionDuration > $MAX_DAILY_DISTRACTION_DURATION) {
    warn "Too much distraction today. Do something off the computer, or something beneficial.\n";
    exit(0);
  }
  if (1 + $todayDistractions > $MAX_DAILY_DISTRACTIONS) {
    warn "You have done that too much today. Do something off the computer, or something beneficial.\n";
    exit(0);
  }


  ## Actually do it
  warn "sleeping for $initialDelay seconds...\n";
  sleep($initialDelay); 
  recordDistraction($duration);
  my $excludeRegex;
  if ($ARGV[1]) {
    $excludeRegex = $ARGV[1];  # exclude only this domain, which means allow these domains
  } else {
    $excludeRegex = '.'; # match anything, therefore exclude everything
  }
  rewriteHostsFile($excludeRegex);
  my $message = sprintf("Press any key to block distraction sites again. Will happen automatically after %d minutes.\n", int($duration / 60));
  warn $message;
  local $SIG{'ALRM'} = sub { 
    warn "Focus on again.\n"; 
    rewriteHostsFile(undef); 
    end(); 
  };
  alarm($duration); 
  ReadMode 4; # turn off control keys
  while (not defined (ReadKey(-1))) {
    sleep(1);
  };
  rewriteHostsFile(undef);
  alarm 0;
  end();
} else {
  usage();
}

__DATA__
9gag.com
cracked.com
digg.com
facebook.com
hulu.com
imgur.com
lifehacker.com
loseit.com
medium.com
netflix.com
news.ycombinator.com
nytimes.com
okcupid.com
overcomingbias.com
quora.com
reddit.com
techcrunch.com
theonion.com
tvtropes.com
twitter.com
wired.com
xkcd.com
ycombinator.com
youtube.com
